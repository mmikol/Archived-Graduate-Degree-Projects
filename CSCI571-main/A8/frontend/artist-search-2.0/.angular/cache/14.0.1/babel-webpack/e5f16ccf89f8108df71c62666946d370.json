{"ast":null,"code":"import _asyncToGenerator from \"/Users/miliano/Documents/mmikol.github.io/A8/frontend/artist-search-2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ArtistDetails } from 'src/models/artist-details';\nimport { Artwork } from 'src/models/artwork';\nlet ArtistResultListComponent = class ArtistResultListComponent {\n  constructor(artistSearchData, artistDetailsData, artistArtworksData) {\n    this.artistSearchData = artistSearchData;\n    this.artistDetailsData = artistDetailsData;\n    this.artistArtworksData = artistArtworksData;\n    this.artistResultsLoaded = false;\n    this.artistExpansionLoaded = false;\n    this.showSpinner = false;\n  }\n\n  ngOnInit() {\n    this.artistSearchData.message.subscribe(data => {\n      this.artistResultsLoaded;\n      this.artistResultsLoaded = data.length > 0;\n      if (this.artistResultsLoaded) this.artists = data;\n    });\n  }\n\n  toggleSpinner() {\n    this.showSpinner = !this.showSpinner;\n  }\n\n  getArtistDetails(query) {\n    return _asyncToGenerator(function* () {\n      const config = [`https://artistsearchbackend.wl.r.appspot.com/artists?id=${query}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }];\n      return yield fetch(...config).then(response => {\n        return response.json();\n      }).then(parsed => new ArtistDetails(parsed));\n    })();\n  }\n\n  getArtistArtworks(query) {\n    return _asyncToGenerator(function* () {\n      const config = [`https://artistsearchbackend.wl.r.appspot.com/artworks?id=${query}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }];\n      return yield fetch(...config).then(response => {\n        return response.json();\n      }).then(parsed => parsed.map(item => {\n        return new Artwork(item);\n      }));\n    })();\n  }\n\n  expandArtist(artistID) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.artistExpansionLoaded) {\n        // clear details\n        _this.artistDetailsData.set([new ArtistDetails({}), !_this.artistExpansionLoaded]);\n\n        _this.artistArtworksData.set([[], !_this.artistExpansionLoaded]);\n      } else _this.artistExpansionLoaded = true;\n\n      _this.toggleSpinner();\n\n      const [artistDetails, artistArtworks] = [yield _this.getArtistDetails(artistID), yield _this.getArtistArtworks(artistID)];\n\n      _this.toggleSpinner();\n\n      _this.artistDetailsData.set([artistDetails, _this.artistExpansionLoaded]); // render details\n\n\n      _this.artistArtworksData.set([artistArtworks, _this.artistExpansionLoaded]); // render artworks\n\n    })();\n  }\n\n};\nArtistResultListComponent = __decorate([Component({\n  selector: 'app-artist-result-list',\n  templateUrl: './artist-result-list.component.html',\n  styleUrls: ['./artist-result-list.component.css']\n})], ArtistResultListComponent);\nexport { ArtistResultListComponent };","map":{"version":3,"mappings":"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","names":["Component","ArtistDetails","Artwork","ArtistResultListComponent","constructor","artistSearchData","artistDetailsData","artistArtworksData","ngOnInit","message","subscribe","data","artistResultsLoaded","length","artists","toggleSpinner","showSpinner","getArtistDetails","query","config","method","headers","fetch","then","response","json","parsed","getArtistArtworks","map","item","expandArtist","artistID","artistExpansionLoaded","set","artistDetails","artistArtworks","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/miliano/Documents/mmikol.github.io/A8/frontend/artist-search-2.0/src/app/artist-result-list/artist-result-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ArtistDetails } from 'src/models/artist-details';\nimport { ArtistsSearchDataService } from 'src/shared/artists-search-data.service';\nimport { ArtistDetailsDataService } from 'src/shared/artist-details-data.service';\nimport { ArtistArtworksDataService } from 'src/shared/artist-artworks-data.service';\nimport { Artwork } from 'src/models/artwork';\nimport { Artist } from 'src/models/artist';\n\n@Component({\n  selector: 'app-artist-result-list',\n  templateUrl: './artist-result-list.component.html',\n  styleUrls: ['./artist-result-list.component.css']\n})\nexport class ArtistResultListComponent implements OnInit {\n  public chosen!: any\n  public artists!: Array<Artist>\n  public artistResultsLoaded: boolean = false\n  public artistExpansionLoaded: boolean = false\n  public showSpinner: boolean = false\n\n  constructor(\n    private artistSearchData: ArtistsSearchDataService, \n    private artistDetailsData: ArtistDetailsDataService, \n    private artistArtworksData: ArtistArtworksDataService) {}\n  \n  ngOnInit(): void {\n    this.artistSearchData.message.subscribe(data => {\n      this.artistResultsLoaded\n      this.artistResultsLoaded = data.length > 0\n      if (this.artistResultsLoaded) this.artists = data\n    })\n  }\n\n  private toggleSpinner() {\n    this.showSpinner = !this.showSpinner\n  }\n\n  public async getArtistDetails(query: string) {\n    const config = [\n      `https://artistsearchbackend.wl.r.appspot.com/artists?id=${query}`,\n      { method: 'GET', headers: { 'Content-Type': 'application/json' } },  \n    ] as const\n    return await fetch(...config)\n      .then(response => { return response.json() })\n      .then(parsed => new ArtistDetails(parsed))\n  }\n\n  public async getArtistArtworks(query: string) {\n    const config = [\n      `https://artistsearchbackend.wl.r.appspot.com/artworks?id=${query}`,\n      { method: 'GET', headers: { 'Content-Type': 'application/json' } },  \n    ] as const\n    return await fetch(...config)\n      .then(response => { return response.json() })\n      .then(parsed =>parsed.map((item: Object) => { return new Artwork(item) }))\n  }\n\n  public async expandArtist(artistID: string) {\n    if (this.artistExpansionLoaded) { // clear details\n      this.artistDetailsData.set([new ArtistDetails({}), !this.artistExpansionLoaded])\n      this.artistArtworksData.set([[], !this.artistExpansionLoaded])\n    } else this.artistExpansionLoaded = true\n    this.toggleSpinner()\n    const [artistDetails, artistArtworks] = [await this.getArtistDetails(artistID), await this.getArtistArtworks(artistID)]\n    this.toggleSpinner()\n    this.artistDetailsData.set([artistDetails, this.artistExpansionLoaded]) // render details\n    this.artistArtworksData.set([artistArtworks, this.artistExpansionLoaded]) // render artworks\n  }\n}\n"]},"metadata":{},"sourceType":"module"}